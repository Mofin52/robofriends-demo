{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchTerm","initialStateRobots","isPending","robots","error","Card","_ref","name","email","react_default","a","createElement","className","alt","src","concat","CardList","map","el","components_Card","id","key","SearchBox","props","aria-label","type","placeholder","onChange","onSearchChange","value","searchValue","Scroll","style","overflowY","border","height","children","CounterButton","state","count","updateCount","_this","setState","color","this","onClick","React","PureComponent","Header","components_CounterButton","Component","ErrorBoundary","hasError","App","onRequestRobots","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","rootReducer","combineReducers","arguments","length","undefined","action","Object","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c4c3295e.chunk.js","sourcesContent":["import {\n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nconst initialStateSearch = {\n    searchTerm: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCHFIELD:\n            return {...state, searchTerm: action.payload}\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action ={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true};\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state, robots: action.payload, isPending: false};\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, error: action.payload, isPending: false};\n        default:\n            return state;\n    }\n}","import React from 'react';\n\nconst Card = ({name, email}) => {\n    return (\n        <div className='bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5 tc'>\n            <img alt='robots' src={`https://robohash.org/${name}?size=200x200`} />\n            <div className=''>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return robots.map(el =>\n            <Card\n                name={el.name}\n                email={el.email}\n                id={el.id}\n                key={el.name}\n            />\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = (props) => {\n    return (\n        <div className='pa2'>\n            <input\n                aria-label='Search robots'\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robofriends'\n                onChange={props.onSearchChange}\n                value={props.searchValue}\n                >\n            </input>\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React from 'react';\n\nclass CounterButton extends React.PureComponent {\n    state = {\n        count: 0\n    }\n    \n    updateCount = () => {\n        this.setState((state) => {\n            return { count: state.count + 1}\n        });\n    }\n\n    render() {\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\n        );\n    }\n}\n\nexport default CounterButton;","import React from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends React.Component {\n    \n    shouldComponentUpdate() {\n        return false;\n    }\n    \n    render() {\n        return (\n            <div>\n                <h1 className='f1'>RoboFriends</h1>\n                <CounterButton color={'red'}/>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    state = {\n        hasError: false\n    }\n\n    componentDidCatch() {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if(this.state.hasError) {\n            return <h1>Ooops. That is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const filteredRobots = this.props.robots.filter(robot => robot.name.toLowerCase().includes(this.props.searchTerm.toLowerCase()));\n        return this.props.isPending ? <h1>Loading</h1> : (\n            <div className='tc'>\n                <Header/>\n                <SearchBox onSearchChange={this.props.onSearchChange} searchValue={this.props.searchTerm}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        );    \n    }\n}\n\nconst mapStateToProps = state => {\n return {\n     searchTerm: state.searchRobots.searchTerm,\n     robots: state.requestRobots.robots,\n     isPending: state.requestRobots.isPending,\n     error: state.requestRobots.error\n }\n} \n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    };\n} \n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(err => dispatch({type: REQUEST_ROBOTS_FAILED, payload: err}));\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}